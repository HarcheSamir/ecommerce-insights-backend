// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  status        UserStatus @default(ACTIVE)
  accountType   AccountType @default(USER)
  createdAt     DateTime  @default(now())
  stripeCustomerId String?   @unique
  transactions     Transaction[]
  notifications    Notification[]
  searchHistory    SearchHistory[] // Relation to SearchHistory
  visitedProfiles  VisitedProfile[] // Relation to VisitedProfile
  videoProgress    VideoProgress[] 
  favorites     UserFavorite[]
  referredById String? // ID of the user who referred this one
  referrer     User?   @relation("Referrals", fields: [referredById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  referrals    User[]  @relation("Referrals") // List of users this user has referred
  commissionsEarned  Commission[]   @relation("AffiliateCommissions")
  payoutRequests     PayoutRequest[]

  stripeSubscriptionId String?   @unique
  subscriptionStatus SubscriptionStatus @default(INCOMPLETE)
  currentPeriodEnd   DateTime?
  coursePurchases    CoursePurchase[]
  @@map("users")
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
}

// Stripe Transactions
model Transaction {
  id                  String   @id @default(uuid())
  amount              Float
  currency            String
  status              String   // e.g., "succeeded", "pending", "failed"
  createdAt           DateTime @default(now())

  // Foreign Key to User
  userId              String
  user                User     @relation(fields: [userId], references: [id])

  // Stripe Specific IDs for reference
  stripeSubscriptionId String?  @unique
  stripePriceId       String?
  stripeInvoiceId     String?

  // Fields for managing subscription periods
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  cancelAtPeriodEnd   Boolean? @default(false)
  generatedCommission Commission?
  @@map("transactions")
}

// Content Creator Information
model ContentCreator {
  id          String    @id @default(uuid())

  // Fields from your CSV file (without unique constraints)
  profileLink String    // From "Profile Link"
  nickname    String?   // From "Nickname"
  username    String    // From "Username"
  country     String    // From "Country"
  email       String?   // From "Email"
  instagram   String?   // From "Instagram"
  youtube     String?   // From "Youtube"
  followers   Int       @default(0)
  posts       Int       @default(0)
  likes       Int       @default(0)
  bio         String?   @db.Text

  // Relationships
  regionId    String
  region      Region?    @relation(fields: [regionId], references: [id])

  nicheId     String?
  niche       Niche?    @relation(fields: [nicheId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  visitedBy VisitedProfile[] // Relation to VisitedProfile

  @@map("content_creators")
}

model Region {
  id              String   @id @default(uuid())
  name            String   @unique
  countryName   String?
  flag      String?
  contentCreators ContentCreator[]

  @@map("regions")
}

model Niche {
  id              String   @id @default(uuid())
  name            String   @unique
  contentCreators ContentCreator[]

  @@map("niches")
}

// User Notifications
model Notification {
  id        String   @id @default(uuid())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Foreign Key to User
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// User Search History
model SearchHistory {
  id        String   @id @default(uuid())
  keyword   String?
  country   String? // To store the targeted country for the search
  createdAt DateTime @default(now())

  // Foreign Key to User
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("search_history")
}

// User Visited Profile History
model VisitedProfile {
  id        String   @id @default(uuid())
  visitedAt DateTime @default(now())

  // Foreign Key to User
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  // Foreign Key to ContentCreator
  creatorId String
  creator   ContentCreator @relation(fields: [creatorId], references: [id])

  @@map("visited_profiles")
}

model MigratedFiles {
  id        String   @id @default(uuid())
  fileName  String
  filePath  String
  migratedAt DateTime @default(now())

  @@map("migrated_files")
}
// ENUMS //

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum AccountType {
  USER
  ADMIN
}

// New enum for Content Creator platforms
enum Platform {
  TIKTOK
  INSTAGRAM
  YOUTUBE
  FACEBOOK
}


model VideoCourse {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  order       Int      @default(0)
  coverImageUrl String?
  sections      Section[]
  priceEur           Float?    // Replaces 'price'
  priceUsd           Float?    // New field for USD price
  stripePriceIdEur   String?   @unique // Replaces 'stripePriceId'
  stripePriceIdUsd   String?   @unique // New field for USD Stripe Price ID
  purchasedBy   CoursePurchase[]
  @@map("video_courses")
}

model CoursePurchase {
  id            String   @id @default(uuid())
  purchasePrice Float
  purchasedAt   DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId      String
  course        VideoCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_purchases")
}

model Video {
  id           String      @id @default(uuid())
  title        String
  description  String?     @db.Text
  vimeoId      String      @db.Text 
  duration     Int?        // Duration in minutes
  order        Int         @default(0)
  progress     VideoProgress[]
  sectionId    String
  section      Section     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  @@map("videos")
}

model Section {
  id        String      @id @default(uuid())
  title     String
  order     Int         @default(0)
  courseId  String
  course    VideoCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos    Video[]

  @@map("course_sections")
}

model VideoProgress {
  id          String   @id @default(uuid())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  completed   Boolean  @default(false)
  completedAt DateTime?
  
  @@unique([userId, videoId])
  @@map("video_progress")
}


model WinningProduct {
  id                      String    @id @default(uuid())
  productId               BigInt    @unique // The product ID from AliExpress
  title                   String?   @db.Text
  productUrl              String?   @db.Text
  imageUrl                String?   @db.Text
  price                   Float?
  currency                String?   @default("USD")
  salesVolume             Int?      // The 'lastest_volume' field
  
  // --- NEW RICH FIELDS ---
  categoryName            String?   // To filter by category
  firstLevelCategoryName  String?   // To filter by parent category
  historicalData          Json?     // To store sales history { date: "...", sales: 123 }
  googleTrendKeyword      String?   // A clean, AI-generated keyword for Google Trends.

  source                  String    @default("RapidAPI/AliExpress")
  importedAt              DateTime  @default(now())

  favoritedBy             UserFavorite[] // Relation to the new UserFavorite model
  shopName                String?   // To store the shop name
  shopEvaluationRate      String?   // To store the shop rating (e.g., "93.3%")
  @@map("winning_products")
}

// --- NEW MODEL FOR FAVORITES ---
model UserFavorite {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  product     WinningProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  createdAt   DateTime @default(now())

  @@unique([userId, productId]) // A user can only favorite a product once
  @@map("user_favorites")
}

model Commission {
  id                  String   @id @default(uuid())
  amount              Float    // The commission amount, e.g., 9.98
  createdAt           DateTime @default(now())

  affiliateId         String   // The user who earned the commission
  affiliate           User     @relation("AffiliateCommissions", fields: [affiliateId], references: [id], onDelete: Cascade)

  sourceTransactionId String   @unique // The transaction that generated this commission
  sourceTransaction   Transaction @relation(fields: [sourceTransactionId], references: [id], onDelete: Cascade)

  payoutRequestId     String?  // The payout request this commission is included in
  payoutRequest       PayoutRequest? @relation(fields: [payoutRequestId], references: [id], onDelete: SetNull)

  @@map("commissions")
}

model PayoutRequest {
  id          String       @id @default(uuid())
  amount      Float        // The total amount requested
  currency    String       @default("usd")// <-- ADD THIS LINE
  status      PayoutStatus @default(PENDING)
  requestedAt DateTime     @default(now())
  processedAt DateTime?    // When an admin approved, rejected, or paid

  affiliateId String       // The user requesting the payout
  affiliate   User         @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  commissions Commission[] // The list of commissions included in this payout

  @@map("payout_requests")
}

enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

model Setting {
  key   String @id @unique
  value String

  @@map("settings")
}